#include <iostream>
#include <string>
#include <math.h>
using namespace std;

class ComplexNumber {
	double m_real_number, m_imaginary_number;

public:
	ComplexNumber();
	ComplexNumber(double real, double imag);
	friend ComplexNumber operator+(ComplexNumber ob1, ComplexNumber ob2);
	ComplexNumber operator-(ComplexNumber ob);
	friend ComplexNumber operator-(ComplexNumber ob, double real);
	friend ComplexNumber operator-(double real, ComplexNumber ob);
	friend ComplexNumber operator*(ComplexNumber ob1, ComplexNumber ob2);
	ComplexNumber operator/(ComplexNumber ob);
	ComplexNumber operator=(ComplexNumber ob);
	friend int operator==(ComplexNumber ob1, ComplexNumber ob2);
	int operator>(ComplexNumber ob);
	ComplexNumber operator~();
	void Show_Complex_Number(string str);
};
ComplexNumber::ComplexNumber() {
	m_real_number = 1.0;
	m_imaginary_number = 1.0;
}
ComplexNumber::ComplexNumber(double real, double imag) {
	m_real_number = real;
	m_imaginary_number = imag;
}

ComplexNumber operator+(ComplexNumber ob1, ComplexNumber ob2) {
	ComplexNumber tmp;
	tmp.m_real_number = ob1.m_real_number + ob2.m_real_number;
	tmp.m_imaginary_number = ob1.m_imaginary_number + ob2.m_imaginary_number;
	return tmp;
}
ComplexNumber ComplexNumber::operator-(ComplexNumber ob) {
	ComplexNumber tmp;
	tmp.m_real_number = this->m_real_number - ob.m_real_number;
	tmp.m_imaginary_number = this->m_imaginary_number - ob.m_imaginary_number;
	return tmp;
}
ComplexNumber operator-(ComplexNumber ob, double real) {
	ComplexNumber tmp;
	tmp.m_real_number = ob.m_real_number - real;
	tmp.m_imaginary_number = ob.m_imaginary_number - real;
	return tmp;
}
ComplexNumber operator-(double real, ComplexNumber ob) {
	ComplexNumber tmp;
	tmp.m_real_number = real - ob.m_real_number;
	tmp.m_imaginary_number = ob.m_imaginary_number;
	return tmp;
}
ComplexNumber operator*(ComplexNumber ob1, ComplexNumber ob2) {
	ComplexNumber tmp;
	tmp.m_real_number = (ob1.m_real_number * ob2.m_real_number) - (ob1.m_imaginary_number * ob2.m_imaginary_number);
	tmp.m_imaginary_number = (ob1.m_real_number * ob2.m_imaginary_number) + (ob1.m_imaginary_number * ob2.m_real_number);
	return tmp;
}
ComplexNumber ComplexNumber::operator/(ComplexNumber ob) {
	ComplexNumber tmp;
	tmp.m_real_number = ((this->m_real_number * ob.m_real_number) + (this->m_imaginary_number * ob.m_imaginary_number)) / ((ob.m_real_number * ob.m_real_number) + (ob.m_imaginary_number * ob.m_imaginary_number));
	tmp.m_imaginary_number = ((this->m_imaginary_number * ob.m_real_number) - (this->m_real_number * ob.m_imaginary_number)) / ((ob.m_real_number * ob.m_real_number) + (ob.m_imaginary_number * ob.m_imaginary_number));
	return tmp;
}
ComplexNumber ComplexNumber::operator=(ComplexNumber ob) {
	m_real_number = ob.m_real_number;
	m_imaginary_number = ob.m_imaginary_number;
	return ob;
}

ComplexNumber ComplexNumber::operator~() {
	ComplexNumber tmp;
	tmp.m_real_number = this->m_real_number;
	tmp.m_imaginary_number = -(this->m_imaginary_number);

	return tmp;
}

int operator==(ComplexNumber ob1, ComplexNumber ob2) {
	if (ob1.m_imaginary_number == ob2.m_imaginary_number && ob1.m_real_number == ob2.m_real_number) {
		return 1;
	}

	else if (ob1.m_imaginary_number == ob2.m_imaginary_number && ob1.m_real_number != ob2.m_real_number) {
		return 0;
	}
	else {
		return -1;
	}
}
int ComplexNumber::operator>(ComplexNumber ob) {
	if (this->m_imaginary_number == ob.m_imaginary_number && this->m_real_number > ob.m_real_number) {
		return 1;
	}
	else if (this->m_imaginary_number == ob.m_imaginary_number && this->m_imaginary_number < ob.m_imaginary_number) {
		return 0;
	}
	else {
		return -1;
	}
}


void ComplexNumber::Show_Complex_Number(string str) {
	if (this->m_imaginary_number > 0) {
		cout << str << "는 " << m_real_number << " + " << m_imaginary_number << "i" << " 입니다" << endl;
	}
	else if (this->m_imaginary_number < 0) {
		cout << str << "는 " << m_real_number << m_imaginary_number << "i" << " 입니다" << endl;
	}
	else
		cout << str << "는 " << m_real_number << " 입니다" << endl;
}
int main()
{
	ComplexNumber result;
	ComplexNumber ob1(1, 3);
	ComplexNumber ob2(2, 3);
	ComplexNumber ob3(4, 2);
	ComplexNumber ob4(3, 2);
	result.Show_Complex_Number("result");
	ob1.Show_Complex_Number("ob1");
	ob2.Show_Complex_Number("ob2");
	ob3.Show_Complex_Number("ob3");
	ob4.Show_Complex_Number("ob4");
	result = ob1 / ob2;
	result.Show_Complex_Number("ob1/ob2");
	result = ob1 + ob2;
	result.Show_Complex_Number("ob1+ob2");
	result = ob1 * ob2;
	result.Show_Complex_Number("ob1*ob2");
	result = ob3 - ob4;
	result.Show_Complex_Number("ob3-ob4");
	result = ob3.operator~();
	result.Show_Complex_Number("ob3의 켤례복소수는");
	result = ob3 * ob3.operator~();
	result.Show_Complex_Number("ob3와 ob3의 켤레 복소수의 곱은");
	result = 8.0 - ob4;
	result.Show_Complex_Number("8.0 - ob4");
	int x, y;
	x = ob3 > ob4;
	if (x == 1) {
		cout << "ob3가 ob4 보다 큽니다" << endl;
	}
	else if (x == 0) {
		cout << "ob4가 ob3보다 큽니다" << endl;
	}
	else if (x == -1) {
		cout << "ob3와 ob4는 비교가 불가능합니다" << endl;
	}

	y = ob2 == ob3;
	if (y == 1) {
		cout << "ob2가 ob3는 같다" << endl;
	}
	else if (y == 0) {
		cout << "ob2가 ob3는 다르다." << endl;
	}
	else if (y == -1) {
		cout << "ob2와 ob3는 비교가 불가능합니다" << endl;
	}
	system("PAUSE");
	return 0;

}
